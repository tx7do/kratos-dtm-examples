// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shop/service/v1/stock.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Stock

	// no validation rules for Price

	if m.CreateTime != nil {

		if all {
			switch v := interface{}(m.GetCreateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdateTime != nil {

		if all {
			switch v := interface{}(m.GetUpdateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeleteTime != nil {

		if all {
			switch v := interface{}(m.GetDeleteTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on DeductStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeductStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeductStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeductStockRequestMultiError, or nil if none found.
func (m *DeductStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeductStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for Quantity

	// no validation rules for RequestId

	if len(errors) > 0 {
		return DeductStockRequestMultiError(errors)
	}

	return nil
}

// DeductStockRequestMultiError is an error wrapping multiple validation errors
// returned by DeductStockRequest.ValidateAll() if the designated constraints
// aren't met.
type DeductStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeductStockRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeductStockRequestMultiError) AllErrors() []error { return m }

// DeductStockRequestValidationError is the validation error returned by
// DeductStockRequest.Validate if the designated constraints aren't met.
type DeductStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeductStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeductStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeductStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeductStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeductStockRequestValidationError) ErrorName() string {
	return "DeductStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeductStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeductStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeductStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeductStockRequestValidationError{}

// Validate checks the field values on TryDeductStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TryDeductStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TryDeductStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TryDeductStockRequestMultiError, or nil if none found.
func (m *TryDeductStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TryDeductStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for Quantity

	// no validation rules for RequestId

	if len(errors) > 0 {
		return TryDeductStockRequestMultiError(errors)
	}

	return nil
}

// TryDeductStockRequestMultiError is an error wrapping multiple validation
// errors returned by TryDeductStockRequest.ValidateAll() if the designated
// constraints aren't met.
type TryDeductStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TryDeductStockRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TryDeductStockRequestMultiError) AllErrors() []error { return m }

// TryDeductStockRequestValidationError is the validation error returned by
// TryDeductStockRequest.Validate if the designated constraints aren't met.
type TryDeductStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TryDeductStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TryDeductStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TryDeductStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TryDeductStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TryDeductStockRequestValidationError) ErrorName() string {
	return "TryDeductStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TryDeductStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTryDeductStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TryDeductStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TryDeductStockRequestValidationError{}

// Validate checks the field values on ConfirmDeductStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmDeductStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmDeductStockRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmDeductStockRequestMultiError, or nil if none found.
func (m *ConfirmDeductStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmDeductStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for Quantity

	if len(errors) > 0 {
		return ConfirmDeductStockRequestMultiError(errors)
	}

	return nil
}

// ConfirmDeductStockRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmDeductStockRequest.ValidateAll() if the
// designated constraints aren't met.
type ConfirmDeductStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmDeductStockRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmDeductStockRequestMultiError) AllErrors() []error { return m }

// ConfirmDeductStockRequestValidationError is the validation error returned by
// ConfirmDeductStockRequest.Validate if the designated constraints aren't met.
type ConfirmDeductStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmDeductStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmDeductStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmDeductStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmDeductStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmDeductStockRequestValidationError) ErrorName() string {
	return "ConfirmDeductStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmDeductStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmDeductStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmDeductStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmDeductStockRequestValidationError{}

// Validate checks the field values on CancelDeductStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelDeductStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelDeductStockRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelDeductStockRequestMultiError, or nil if none found.
func (m *CancelDeductStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelDeductStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for Quantity

	if len(errors) > 0 {
		return CancelDeductStockRequestMultiError(errors)
	}

	return nil
}

// CancelDeductStockRequestMultiError is an error wrapping multiple validation
// errors returned by CancelDeductStockRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelDeductStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelDeductStockRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelDeductStockRequestMultiError) AllErrors() []error { return m }

// CancelDeductStockRequestValidationError is the validation error returned by
// CancelDeductStockRequest.Validate if the designated constraints aren't met.
type CancelDeductStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelDeductStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelDeductStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelDeductStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelDeductStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelDeductStockRequestValidationError) ErrorName() string {
	return "CancelDeductStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelDeductStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelDeductStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelDeductStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelDeductStockRequestValidationError{}

// Validate checks the field values on RefundStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundStockRequestMultiError, or nil if none found.
func (m *RefundStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for ProductId

	// no validation rules for Quantity

	if len(errors) > 0 {
		return RefundStockRequestMultiError(errors)
	}

	return nil
}

// RefundStockRequestMultiError is an error wrapping multiple validation errors
// returned by RefundStockRequest.ValidateAll() if the designated constraints
// aren't met.
type RefundStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundStockRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundStockRequestMultiError) AllErrors() []error { return m }

// RefundStockRequestValidationError is the validation error returned by
// RefundStockRequest.Validate if the designated constraints aren't met.
type RefundStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundStockRequestValidationError) ErrorName() string {
	return "RefundStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefundStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundStockRequestValidationError{}

// Validate checks the field values on StockResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StockResponseMultiError, or
// nil if none found.
func (m *StockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return StockResponseMultiError(errors)
	}

	return nil
}

// StockResponseMultiError is an error wrapping multiple validation errors
// returned by StockResponse.ValidateAll() if the designated constraints
// aren't met.
type StockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StockResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StockResponseMultiError) AllErrors() []error { return m }

// StockResponseValidationError is the validation error returned by
// StockResponse.Validate if the designated constraints aren't met.
type StockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockResponseValidationError) ErrorName() string { return "StockResponseValidationError" }

// Error satisfies the builtin error interface
func (e StockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockResponseValidationError{}
