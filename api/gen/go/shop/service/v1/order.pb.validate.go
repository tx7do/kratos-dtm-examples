// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shop/service/v1/order.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ProductId

	// no validation rules for RequestId

	// no validation rules for OrderNo

	// no validation rules for Quantity

	// no validation rules for TotalPrice

	// no validation rules for Status

	if m.CreateTime != nil {

		if all {
			switch v := interface{}(m.GetCreateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdateTime != nil {

		if all {
			switch v := interface{}(m.GetUpdateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeleteTime != nil {

		if all {
			switch v := interface{}(m.GetDeleteTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRequestMultiError, or nil if none found.
func (m *CreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ProductId

	// no validation rules for Quantity

	// no validation rules for RequestId

	// no validation rules for OrderNo

	if len(errors) > 0 {
		return CreateOrderRequestMultiError(errors)
	}

	return nil
}

// CreateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRequestMultiError) AllErrors() []error { return m }

// CreateOrderRequestValidationError is the validation error returned by
// CreateOrderRequest.Validate if the designated constraints aren't met.
type CreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestValidationError) ErrorName() string {
	return "CreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestValidationError{}

// Validate checks the field values on TryCreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TryCreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TryCreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TryCreateOrderRequestMultiError, or nil if none found.
func (m *TryCreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TryCreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ProductId

	// no validation rules for Quantity

	// no validation rules for RequestId

	// no validation rules for OrderNo

	if len(errors) > 0 {
		return TryCreateOrderRequestMultiError(errors)
	}

	return nil
}

// TryCreateOrderRequestMultiError is an error wrapping multiple validation
// errors returned by TryCreateOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type TryCreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TryCreateOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TryCreateOrderRequestMultiError) AllErrors() []error { return m }

// TryCreateOrderRequestValidationError is the validation error returned by
// TryCreateOrderRequest.Validate if the designated constraints aren't met.
type TryCreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TryCreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TryCreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TryCreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TryCreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TryCreateOrderRequestValidationError) ErrorName() string {
	return "TryCreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TryCreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTryCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TryCreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TryCreateOrderRequestValidationError{}

// Validate checks the field values on ConfirmCreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmCreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmCreateOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmCreateOrderRequestMultiError, or nil if none found.
func (m *ConfirmCreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmCreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ProductId

	// no validation rules for Quantity

	// no validation rules for RequestId

	// no validation rules for OrderNo

	if len(errors) > 0 {
		return ConfirmCreateOrderRequestMultiError(errors)
	}

	return nil
}

// ConfirmCreateOrderRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmCreateOrderRequest.ValidateAll() if the
// designated constraints aren't met.
type ConfirmCreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmCreateOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmCreateOrderRequestMultiError) AllErrors() []error { return m }

// ConfirmCreateOrderRequestValidationError is the validation error returned by
// ConfirmCreateOrderRequest.Validate if the designated constraints aren't met.
type ConfirmCreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmCreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmCreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmCreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmCreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmCreateOrderRequestValidationError) ErrorName() string {
	return "ConfirmCreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmCreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmCreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmCreateOrderRequestValidationError{}

// Validate checks the field values on CancelCreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelCreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelCreateOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelCreateOrderRequestMultiError, or nil if none found.
func (m *CancelCreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelCreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ProductId

	// no validation rules for Quantity

	// no validation rules for RequestId

	// no validation rules for OrderNo

	if len(errors) > 0 {
		return CancelCreateOrderRequestMultiError(errors)
	}

	return nil
}

// CancelCreateOrderRequestMultiError is an error wrapping multiple validation
// errors returned by CancelCreateOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelCreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelCreateOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelCreateOrderRequestMultiError) AllErrors() []error { return m }

// CancelCreateOrderRequestValidationError is the validation error returned by
// CancelCreateOrderRequest.Validate if the designated constraints aren't met.
type CancelCreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelCreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelCreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelCreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelCreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelCreateOrderRequestValidationError) ErrorName() string {
	return "CancelCreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelCreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelCreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelCreateOrderRequestValidationError{}

// Validate checks the field values on RefundOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundOrderRequestMultiError, or nil if none found.
func (m *RefundOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderNo

	if len(errors) > 0 {
		return RefundOrderRequestMultiError(errors)
	}

	return nil
}

// RefundOrderRequestMultiError is an error wrapping multiple validation errors
// returned by RefundOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type RefundOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundOrderRequestMultiError) AllErrors() []error { return m }

// RefundOrderRequestValidationError is the validation error returned by
// RefundOrderRequest.Validate if the designated constraints aren't met.
type RefundOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundOrderRequestValidationError) ErrorName() string {
	return "RefundOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefundOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundOrderRequestValidationError{}

// Validate checks the field values on OrderResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderResponseMultiError, or
// nil if none found.
func (m *OrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return OrderResponseMultiError(errors)
	}

	return nil
}

// OrderResponseMultiError is an error wrapping multiple validation errors
// returned by OrderResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResponseMultiError) AllErrors() []error { return m }

// OrderResponseValidationError is the validation error returned by
// OrderResponse.Validate if the designated constraints aren't met.
type OrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResponseValidationError) ErrorName() string { return "OrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e OrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResponseValidationError{}
