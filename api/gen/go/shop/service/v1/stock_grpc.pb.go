// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: shop/service/v1/stock.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockService_DeductStock_FullMethodName        = "/shop.service.v1.StockService/DeductStock"
	StockService_TryDeductStock_FullMethodName     = "/shop.service.v1.StockService/TryDeductStock"
	StockService_ConfirmDeductStock_FullMethodName = "/shop.service.v1.StockService/ConfirmDeductStock"
	StockService_CancelDeductStock_FullMethodName  = "/shop.service.v1.StockService/CancelDeductStock"
	StockService_RefundStock_FullMethodName        = "/shop.service.v1.StockService/RefundStock"
)

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 库存服务
type StockServiceClient interface {
	DeductStock(ctx context.Context, in *DeductStockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	TryDeductStock(ctx context.Context, in *TryDeductStockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	ConfirmDeductStock(ctx context.Context, in *ConfirmDeductStockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	CancelDeductStock(ctx context.Context, in *CancelDeductStockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	RefundStock(ctx context.Context, in *RefundStockRequest, opts ...grpc.CallOption) (*StockResponse, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) DeductStock(ctx context.Context, in *DeductStockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, StockService_DeductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) TryDeductStock(ctx context.Context, in *TryDeductStockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, StockService_TryDeductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ConfirmDeductStock(ctx context.Context, in *ConfirmDeductStockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, StockService_ConfirmDeductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) CancelDeductStock(ctx context.Context, in *CancelDeductStockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, StockService_CancelDeductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) RefundStock(ctx context.Context, in *RefundStockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, StockService_RefundStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility.
//
// 库存服务
type StockServiceServer interface {
	DeductStock(context.Context, *DeductStockRequest) (*StockResponse, error)
	TryDeductStock(context.Context, *TryDeductStockRequest) (*StockResponse, error)
	ConfirmDeductStock(context.Context, *ConfirmDeductStockRequest) (*StockResponse, error)
	CancelDeductStock(context.Context, *CancelDeductStockRequest) (*StockResponse, error)
	RefundStock(context.Context, *RefundStockRequest) (*StockResponse, error)
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStockServiceServer struct{}

func (UnimplementedStockServiceServer) DeductStock(context.Context, *DeductStockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductStock not implemented")
}
func (UnimplementedStockServiceServer) TryDeductStock(context.Context, *TryDeductStockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryDeductStock not implemented")
}
func (UnimplementedStockServiceServer) ConfirmDeductStock(context.Context, *ConfirmDeductStockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDeductStock not implemented")
}
func (UnimplementedStockServiceServer) CancelDeductStock(context.Context, *CancelDeductStockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDeductStock not implemented")
}
func (UnimplementedStockServiceServer) RefundStock(context.Context, *RefundStockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundStock not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}
func (UnimplementedStockServiceServer) testEmbeddedByValue()                      {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	// If the following call pancis, it indicates UnimplementedStockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_DeductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).DeductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_DeductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).DeductStock(ctx, req.(*DeductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_TryDeductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryDeductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).TryDeductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_TryDeductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).TryDeductStock(ctx, req.(*TryDeductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ConfirmDeductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmDeductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ConfirmDeductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_ConfirmDeductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ConfirmDeductStock(ctx, req.(*ConfirmDeductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_CancelDeductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDeductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).CancelDeductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_CancelDeductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).CancelDeductStock(ctx, req.(*CancelDeductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_RefundStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).RefundStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_RefundStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).RefundStock(ctx, req.(*RefundStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shop.service.v1.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeductStock",
			Handler:    _StockService_DeductStock_Handler,
		},
		{
			MethodName: "TryDeductStock",
			Handler:    _StockService_TryDeductStock_Handler,
		},
		{
			MethodName: "ConfirmDeductStock",
			Handler:    _StockService_ConfirmDeductStock_Handler,
		},
		{
			MethodName: "CancelDeductStock",
			Handler:    _StockService_CancelDeductStock_Handler,
		},
		{
			MethodName: "RefundStock",
			Handler:    _StockService_RefundStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shop/service/v1/stock.proto",
}
