// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: shop/service/v1/shop.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShopServiceTestSAGA = "/shop.service.v1.ShopService/TestSAGA"
const OperationShopServiceTestTCC = "/shop.service.v1.ShopService/TestTCC"
const OperationShopServiceTestTP = "/shop.service.v1.ShopService/TestTP"
const OperationShopServiceTestWorkFlowMixed = "/shop.service.v1.ShopService/TestWorkFlowMixed"
const OperationShopServiceTestWorkFlowSAGA = "/shop.service.v1.ShopService/TestWorkFlowSAGA"
const OperationShopServiceTestWorkFlowTCC = "/shop.service.v1.ShopService/TestWorkFlowTCC"
const OperationShopServiceTestWorkFlowXA = "/shop.service.v1.ShopService/TestWorkFlowXA"
const OperationShopServiceTestXA = "/shop.service.v1.ShopService/TestXA"

type ShopServiceHTTPServer interface {
	// TestSAGA SAGA
	TestSAGA(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestTCC TCC（Try-Confirm-Cancel）
	TestTCC(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestTP 二阶段消息（Two-Phase Message）
	TestTP(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestWorkFlowMixed 工作流事务 - 混合
	TestWorkFlowMixed(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestWorkFlowSAGA 工作流事务 - SAGA
	TestWorkFlowSAGA(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestWorkFlowTCC 工作流事务 - TCC
	TestWorkFlowTCC(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestWorkFlowXA 工作流事务 - XA
	TestWorkFlowXA(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestXA XA
	TestXA(context.Context, *BuyRequest) (*BuyResponse, error)
}

func RegisterShopServiceHTTPServer(s *http.Server, srv ShopServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/shop/tp", _ShopService_TestTP0_HTTP_Handler(srv))
	r.GET("/shop/tcc", _ShopService_TestTCC0_HTTP_Handler(srv))
	r.GET("/shop/saga", _ShopService_TestSAGA0_HTTP_Handler(srv))
	r.GET("/shop/xa", _ShopService_TestXA0_HTTP_Handler(srv))
	r.GET("/shop/workflow/saga", _ShopService_TestWorkFlowSAGA0_HTTP_Handler(srv))
	r.GET("/shop/workflow/tcc", _ShopService_TestWorkFlowTCC0_HTTP_Handler(srv))
	r.GET("/shop/workflow/xa", _ShopService_TestWorkFlowXA0_HTTP_Handler(srv))
	r.GET("/shop/workflow/mixed", _ShopService_TestWorkFlowMixed0_HTTP_Handler(srv))
}

func _ShopService_TestTP0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestTP)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestTP(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestTCC0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestTCC)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestTCC(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestSAGA0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestSAGA)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestSAGA(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestXA0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestXA)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestXA(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestWorkFlowSAGA0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestWorkFlowSAGA)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestWorkFlowSAGA(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestWorkFlowTCC0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestWorkFlowTCC)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestWorkFlowTCC(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestWorkFlowXA0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestWorkFlowXA)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestWorkFlowXA(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestWorkFlowMixed0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestWorkFlowMixed)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestWorkFlowMixed(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

type ShopServiceHTTPClient interface {
	TestSAGA(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestTCC(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestTP(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestWorkFlowMixed(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestWorkFlowSAGA(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestWorkFlowTCC(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestWorkFlowXA(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestXA(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
}

type ShopServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewShopServiceHTTPClient(client *http.Client) ShopServiceHTTPClient {
	return &ShopServiceHTTPClientImpl{client}
}

func (c *ShopServiceHTTPClientImpl) TestSAGA(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/shop/saga"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestSAGA))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestTCC(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/shop/tcc"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestTCC))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestTP(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/shop/tp"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestTP))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestWorkFlowMixed(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/shop/workflow/mixed"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestWorkFlowMixed))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestWorkFlowSAGA(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/shop/workflow/saga"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestWorkFlowSAGA))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestWorkFlowTCC(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/shop/workflow/tcc"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestWorkFlowTCC))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestWorkFlowXA(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/shop/workflow/xa"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestWorkFlowXA))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestXA(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/shop/xa"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestXA))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
