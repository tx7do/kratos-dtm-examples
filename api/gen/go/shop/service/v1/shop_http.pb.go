// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: shop/service/v1/shop.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShopServiceTestSAGA = "/shop.service.v1.ShopService/TestSAGA"
const OperationShopServiceTestTCC = "/shop.service.v1.ShopService/TestTCC"
const OperationShopServiceTestTP = "/shop.service.v1.ShopService/TestTP"
const OperationShopServiceTestWorkFlow = "/shop.service.v1.ShopService/TestWorkFlow"
const OperationShopServiceTestXA = "/shop.service.v1.ShopService/TestXA"

type ShopServiceHTTPServer interface {
	// TestSAGA SAGA
	TestSAGA(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestTCC TCC
	TestTCC(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestTP 二阶段消息
	TestTP(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestWorkFlow 工作流Workflow
	TestWorkFlow(context.Context, *BuyRequest) (*BuyResponse, error)
	// TestXA XA
	TestXA(context.Context, *BuyRequest) (*BuyResponse, error)
}

func RegisterShopServiceHTTPServer(s *http.Server, srv ShopServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/test/tp", _ShopService_TestTP0_HTTP_Handler(srv))
	r.GET("/test/tcc", _ShopService_TestTCC0_HTTP_Handler(srv))
	r.GET("/test/saga", _ShopService_TestSAGA0_HTTP_Handler(srv))
	r.GET("/test/xa", _ShopService_TestXA0_HTTP_Handler(srv))
	r.GET("/test/wf", _ShopService_TestWorkFlow0_HTTP_Handler(srv))
}

func _ShopService_TestTP0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestTP)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestTP(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestTCC0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestTCC)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestTCC(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestSAGA0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestSAGA)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestSAGA(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestXA0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestXA)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestXA(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

func _ShopService_TestWorkFlow0_HTTP_Handler(srv ShopServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopServiceTestWorkFlow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestWorkFlow(ctx, req.(*BuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyResponse)
		return ctx.Result(200, reply)
	}
}

type ShopServiceHTTPClient interface {
	TestSAGA(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestTCC(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestTP(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestWorkFlow(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
	TestXA(ctx context.Context, req *BuyRequest, opts ...http.CallOption) (rsp *BuyResponse, err error)
}

type ShopServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewShopServiceHTTPClient(client *http.Client) ShopServiceHTTPClient {
	return &ShopServiceHTTPClientImpl{client}
}

func (c *ShopServiceHTTPClientImpl) TestSAGA(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/test/saga"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestSAGA))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestTCC(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/test/tcc"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestTCC))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestTP(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/test/tp"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestTP))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestWorkFlow(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/test/wf"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestWorkFlow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopServiceHTTPClientImpl) TestXA(ctx context.Context, in *BuyRequest, opts ...http.CallOption) (*BuyResponse, error) {
	var out BuyResponse
	pattern := "/test/xa"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopServiceTestXA))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
