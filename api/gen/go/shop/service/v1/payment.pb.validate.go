// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shop/service/v1/payment.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TryMakePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TryMakePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TryMakePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TryMakePaymentRequestMultiError, or nil if none found.
func (m *TryMakePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TryMakePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Amount

	if len(errors) > 0 {
		return TryMakePaymentRequestMultiError(errors)
	}

	return nil
}

// TryMakePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by TryMakePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type TryMakePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TryMakePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TryMakePaymentRequestMultiError) AllErrors() []error { return m }

// TryMakePaymentRequestValidationError is the validation error returned by
// TryMakePaymentRequest.Validate if the designated constraints aren't met.
type TryMakePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TryMakePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TryMakePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TryMakePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TryMakePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TryMakePaymentRequestValidationError) ErrorName() string {
	return "TryMakePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TryMakePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTryMakePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TryMakePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TryMakePaymentRequestValidationError{}

// Validate checks the field values on TryMakePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TryMakePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TryMakePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TryMakePaymentResponseMultiError, or nil if none found.
func (m *TryMakePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TryMakePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return TryMakePaymentResponseMultiError(errors)
	}

	return nil
}

// TryMakePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by TryMakePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type TryMakePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TryMakePaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TryMakePaymentResponseMultiError) AllErrors() []error { return m }

// TryMakePaymentResponseValidationError is the validation error returned by
// TryMakePaymentResponse.Validate if the designated constraints aren't met.
type TryMakePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TryMakePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TryMakePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TryMakePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TryMakePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TryMakePaymentResponseValidationError) ErrorName() string {
	return "TryMakePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TryMakePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTryMakePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TryMakePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TryMakePaymentResponseValidationError{}

// Validate checks the field values on ConfirmMakePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmMakePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmMakePaymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmMakePaymentRequestMultiError, or nil if none found.
func (m *ConfirmMakePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmMakePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	if len(errors) > 0 {
		return ConfirmMakePaymentRequestMultiError(errors)
	}

	return nil
}

// ConfirmMakePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmMakePaymentRequest.ValidateAll() if the
// designated constraints aren't met.
type ConfirmMakePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmMakePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmMakePaymentRequestMultiError) AllErrors() []error { return m }

// ConfirmMakePaymentRequestValidationError is the validation error returned by
// ConfirmMakePaymentRequest.Validate if the designated constraints aren't met.
type ConfirmMakePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmMakePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmMakePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmMakePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmMakePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmMakePaymentRequestValidationError) ErrorName() string {
	return "ConfirmMakePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmMakePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmMakePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmMakePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmMakePaymentRequestValidationError{}

// Validate checks the field values on CancelMakePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelMakePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelMakePaymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelMakePaymentRequestMultiError, or nil if none found.
func (m *CancelMakePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelMakePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	if len(errors) > 0 {
		return CancelMakePaymentRequestMultiError(errors)
	}

	return nil
}

// CancelMakePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CancelMakePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelMakePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelMakePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelMakePaymentRequestMultiError) AllErrors() []error { return m }

// CancelMakePaymentRequestValidationError is the validation error returned by
// CancelMakePaymentRequest.Validate if the designated constraints aren't met.
type CancelMakePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMakePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMakePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMakePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMakePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMakePaymentRequestValidationError) ErrorName() string {
	return "CancelMakePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelMakePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMakePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMakePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMakePaymentRequestValidationError{}
