// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: bank/service/v1/bank_error.proto

package servicev1

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BankErrorReason int32

const (
	// 400
	BankErrorReason_BAD_REQUEST BankErrorReason = 0
	// 401
	BankErrorReason_UNAUTHORIZED BankErrorReason = 100
	// 402
	BankErrorReason_PAYMENT_REQUIRED BankErrorReason = 200
	// 403
	BankErrorReason_FORBIDDEN BankErrorReason = 300
	// 404
	BankErrorReason_NOT_FOUND BankErrorReason = 400
	// 405
	BankErrorReason_METHOD_NOT_ALLOWED BankErrorReason = 500
	// 406
	BankErrorReason_NOT_ACCEPTABLE BankErrorReason = 600
	// 407
	BankErrorReason_PROXY_AUTHENTICATION_REQUIRED BankErrorReason = 700
	// 408
	BankErrorReason_REQUEST_TIMEOUT BankErrorReason = 800
	// 409
	BankErrorReason_CONFLICT BankErrorReason = 900
	// 410
	BankErrorReason_GONE BankErrorReason = 1000
	// 411
	BankErrorReason_LENGTH_REQUIRED BankErrorReason = 1010
	// 412
	BankErrorReason_PRECONDITION_FAILED BankErrorReason = 1020
	// 413
	BankErrorReason_PAYLOAD_TOO_LARGE BankErrorReason = 1030
	// 414
	BankErrorReason_URI_TOO_LONG BankErrorReason = 1040
	// 415
	BankErrorReason_UNSUPPORTED_MEDIA_TYPE BankErrorReason = 1050
	// 416
	BankErrorReason_RANGE_NOT_SATISFIABLE BankErrorReason = 1060
	// 417
	BankErrorReason_EXPECTATION_FAILED BankErrorReason = 1070
	// 418
	BankErrorReason_IM_A_TEAPOT BankErrorReason = 1080
	// 421
	BankErrorReason_MISDIRECTED_REQUEST BankErrorReason = 1090
	// 422
	BankErrorReason_UNPROCESSABLE_ENTITY BankErrorReason = 1100
	// 423
	BankErrorReason_LOCKED BankErrorReason = 1110
	// 424
	BankErrorReason_FAILED_DEPENDENCY BankErrorReason = 1120
	// 425
	BankErrorReason_TOO_EARLY BankErrorReason = 1130
	// 426
	BankErrorReason_UPGRADE_REQUIRED BankErrorReason = 1140
	// 428
	BankErrorReason_PRECONDITION_REQUIRED BankErrorReason = 1150
	// 429
	BankErrorReason_TOO_MANY_REQUESTS BankErrorReason = 1160
	// 431
	BankErrorReason_REQUEST_HEADER_FIELDS_TOO_LARGE BankErrorReason = 1170
	// 451
	BankErrorReason_UNAVAILABLE_FOR_LEGAL_REASONS BankErrorReason = 1180
	// 500
	BankErrorReason_INTERNAL_SERVER_ERROR BankErrorReason = 2000
	// 501
	BankErrorReason_NOT_IMPLEMENTED BankErrorReason = 2100
	// 502
	BankErrorReason_BAD_GATEWAY BankErrorReason = 2200
	// 503
	BankErrorReason_SERVICE_UNAVAILABLE BankErrorReason = 2300
	// 504
	BankErrorReason_GATEWAY_TIMEOUT BankErrorReason = 2400
	// 505
	BankErrorReason_HTTP_VERSION_NOT_SUPPORTED BankErrorReason = 2500
	// 506
	BankErrorReason_VARIANT_ALSO_NEGOTIATES BankErrorReason = 2600
	// 507
	BankErrorReason_INSUFFICIENT_STORAGE BankErrorReason = 2700
	// 508
	BankErrorReason_LOOP_DETECTED BankErrorReason = 2800
	// 510
	BankErrorReason_NOT_EXTENDED BankErrorReason = 2900
	// 511
	BankErrorReason_NETWORK_AUTHENTICATION_REQUIRED BankErrorReason = 3000
	// 598
	BankErrorReason_NETWORK_READ_TIMEOUT_ERROR BankErrorReason = 3100
	// 599
	BankErrorReason_NETWORK_CONNECT_TIMEOUT_ERROR BankErrorReason = 3200
)

// Enum value maps for BankErrorReason.
var (
	BankErrorReason_name = map[int32]string{
		0:    "BAD_REQUEST",
		100:  "UNAUTHORIZED",
		200:  "PAYMENT_REQUIRED",
		300:  "FORBIDDEN",
		400:  "NOT_FOUND",
		500:  "METHOD_NOT_ALLOWED",
		600:  "NOT_ACCEPTABLE",
		700:  "PROXY_AUTHENTICATION_REQUIRED",
		800:  "REQUEST_TIMEOUT",
		900:  "CONFLICT",
		1000: "GONE",
		1010: "LENGTH_REQUIRED",
		1020: "PRECONDITION_FAILED",
		1030: "PAYLOAD_TOO_LARGE",
		1040: "URI_TOO_LONG",
		1050: "UNSUPPORTED_MEDIA_TYPE",
		1060: "RANGE_NOT_SATISFIABLE",
		1070: "EXPECTATION_FAILED",
		1080: "IM_A_TEAPOT",
		1090: "MISDIRECTED_REQUEST",
		1100: "UNPROCESSABLE_ENTITY",
		1110: "LOCKED",
		1120: "FAILED_DEPENDENCY",
		1130: "TOO_EARLY",
		1140: "UPGRADE_REQUIRED",
		1150: "PRECONDITION_REQUIRED",
		1160: "TOO_MANY_REQUESTS",
		1170: "REQUEST_HEADER_FIELDS_TOO_LARGE",
		1180: "UNAVAILABLE_FOR_LEGAL_REASONS",
		2000: "INTERNAL_SERVER_ERROR",
		2100: "NOT_IMPLEMENTED",
		2200: "BAD_GATEWAY",
		2300: "SERVICE_UNAVAILABLE",
		2400: "GATEWAY_TIMEOUT",
		2500: "HTTP_VERSION_NOT_SUPPORTED",
		2600: "VARIANT_ALSO_NEGOTIATES",
		2700: "INSUFFICIENT_STORAGE",
		2800: "LOOP_DETECTED",
		2900: "NOT_EXTENDED",
		3000: "NETWORK_AUTHENTICATION_REQUIRED",
		3100: "NETWORK_READ_TIMEOUT_ERROR",
		3200: "NETWORK_CONNECT_TIMEOUT_ERROR",
	}
	BankErrorReason_value = map[string]int32{
		"BAD_REQUEST":                     0,
		"UNAUTHORIZED":                    100,
		"PAYMENT_REQUIRED":                200,
		"FORBIDDEN":                       300,
		"NOT_FOUND":                       400,
		"METHOD_NOT_ALLOWED":              500,
		"NOT_ACCEPTABLE":                  600,
		"PROXY_AUTHENTICATION_REQUIRED":   700,
		"REQUEST_TIMEOUT":                 800,
		"CONFLICT":                        900,
		"GONE":                            1000,
		"LENGTH_REQUIRED":                 1010,
		"PRECONDITION_FAILED":             1020,
		"PAYLOAD_TOO_LARGE":               1030,
		"URI_TOO_LONG":                    1040,
		"UNSUPPORTED_MEDIA_TYPE":          1050,
		"RANGE_NOT_SATISFIABLE":           1060,
		"EXPECTATION_FAILED":              1070,
		"IM_A_TEAPOT":                     1080,
		"MISDIRECTED_REQUEST":             1090,
		"UNPROCESSABLE_ENTITY":            1100,
		"LOCKED":                          1110,
		"FAILED_DEPENDENCY":               1120,
		"TOO_EARLY":                       1130,
		"UPGRADE_REQUIRED":                1140,
		"PRECONDITION_REQUIRED":           1150,
		"TOO_MANY_REQUESTS":               1160,
		"REQUEST_HEADER_FIELDS_TOO_LARGE": 1170,
		"UNAVAILABLE_FOR_LEGAL_REASONS":   1180,
		"INTERNAL_SERVER_ERROR":           2000,
		"NOT_IMPLEMENTED":                 2100,
		"BAD_GATEWAY":                     2200,
		"SERVICE_UNAVAILABLE":             2300,
		"GATEWAY_TIMEOUT":                 2400,
		"HTTP_VERSION_NOT_SUPPORTED":      2500,
		"VARIANT_ALSO_NEGOTIATES":         2600,
		"INSUFFICIENT_STORAGE":            2700,
		"LOOP_DETECTED":                   2800,
		"NOT_EXTENDED":                    2900,
		"NETWORK_AUTHENTICATION_REQUIRED": 3000,
		"NETWORK_READ_TIMEOUT_ERROR":      3100,
		"NETWORK_CONNECT_TIMEOUT_ERROR":   3200,
	}
)

func (x BankErrorReason) Enum() *BankErrorReason {
	p := new(BankErrorReason)
	*p = x
	return p
}

func (x BankErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_bank_service_v1_bank_error_proto_enumTypes[0].Descriptor()
}

func (BankErrorReason) Type() protoreflect.EnumType {
	return &file_bank_service_v1_bank_error_proto_enumTypes[0]
}

func (x BankErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankErrorReason.Descriptor instead.
func (BankErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_bank_service_v1_bank_error_proto_rawDescGZIP(), []int{0}
}

var File_bank_service_v1_bank_error_proto protoreflect.FileDescriptor

var file_bank_service_v1_bank_error_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x8d, 0x0a, 0x0a, 0x0f, 0x42, 0x61, 0x6e,
	0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x0b,
	0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x1a, 0x04, 0xa8,
	0x45, 0x90, 0x03, 0x12, 0x16, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x64, 0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x1b, 0x0a, 0x10, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0xc8, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x92, 0x03, 0x12, 0x14, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x42,
	0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0xac, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x14,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x90, 0x03, 0x1a, 0x04,
	0xa8, 0x45, 0x94, 0x03, 0x12, 0x1d, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0xf4, 0x03, 0x1a, 0x04, 0xa8,
	0x45, 0x95, 0x03, 0x12, 0x19, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xd8, 0x04, 0x1a, 0x04, 0xa8, 0x45, 0x96, 0x03, 0x12, 0x28,
	0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0xbc, 0x05, 0x1a, 0x04, 0xa8, 0x45, 0x97, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xa0, 0x06, 0x1a, 0x04,
	0xa8, 0x45, 0x98, 0x03, 0x12, 0x13, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54,
	0x10, 0x84, 0x07, 0x1a, 0x04, 0xa8, 0x45, 0x99, 0x03, 0x12, 0x0f, 0x0a, 0x04, 0x47, 0x4f, 0x4e,
	0x45, 0x10, 0xe8, 0x07, 0x1a, 0x04, 0xa8, 0x45, 0x9a, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xf2, 0x07,
	0x1a, 0x04, 0xa8, 0x45, 0x9b, 0x03, 0x12, 0x1e, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xfc, 0x07,
	0x1a, 0x04, 0xa8, 0x45, 0x9c, 0x03, 0x12, 0x1c, 0x0a, 0x11, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x86, 0x08, 0x1a, 0x04,
	0xa8, 0x45, 0x9d, 0x03, 0x12, 0x17, 0x0a, 0x0c, 0x55, 0x52, 0x49, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x90, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0x9e, 0x03, 0x12, 0x21, 0x0a,
	0x16, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x9a, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0x9f, 0x03,
	0x12, 0x20, 0x0a, 0x15, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x41,
	0x54, 0x49, 0x53, 0x46, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xa4, 0x08, 0x1a, 0x04, 0xa8, 0x45,
	0xa0, 0x03, 0x12, 0x1d, 0x0a, 0x12, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xae, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xa1,
	0x03, 0x12, 0x16, 0x0a, 0x0b, 0x49, 0x4d, 0x5f, 0x41, 0x5f, 0x54, 0x45, 0x41, 0x50, 0x4f, 0x54,
	0x10, 0xb8, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xa2, 0x03, 0x12, 0x1e, 0x0a, 0x13, 0x4d, 0x49, 0x53,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0xc2, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xa5, 0x03, 0x12, 0x1f, 0x0a, 0x14, 0x55, 0x4e, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x10, 0xcc, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xa6, 0x03, 0x12, 0x11, 0x0a, 0x06, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0xd6, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xa7, 0x03, 0x12, 0x1c, 0x0a,
	0x11, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0xe0, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xa8, 0x03, 0x12, 0x14, 0x0a, 0x09, 0x54,
	0x4f, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0xea, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xa9,
	0x03, 0x12, 0x1b, 0x0a, 0x10, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xf4, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xaa, 0x03, 0x12, 0x20,
	0x0a, 0x15, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xfe, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xac, 0x03,
	0x12, 0x1c, 0x0a, 0x11, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x88, 0x09, 0x1a, 0x04, 0xa8, 0x45, 0xad, 0x03, 0x12, 0x2a,
	0x0a, 0x1f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47,
	0x45, 0x10, 0x92, 0x09, 0x1a, 0x04, 0xa8, 0x45, 0xaf, 0x03, 0x12, 0x28, 0x0a, 0x1d, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4c, 0x45,
	0x47, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x10, 0x9c, 0x09, 0x1a, 0x04,
	0xa8, 0x45, 0xc3, 0x03, 0x12, 0x20, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd0, 0x0f,
	0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d,
	0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0xb4, 0x10, 0x1a, 0x04, 0xa8, 0x45,
	0xf5, 0x03, 0x12, 0x16, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x10, 0x98, 0x11, 0x1a, 0x04, 0xa8, 0x45, 0xf6, 0x03, 0x12, 0x1e, 0x0a, 0x13, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0xfc, 0x11, 0x1a, 0x04, 0xa8, 0x45, 0xf7, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x47, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xe0, 0x12,
	0x1a, 0x04, 0xa8, 0x45, 0xf8, 0x03, 0x12, 0x25, 0x0a, 0x1a, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0xc4, 0x13, 0x1a, 0x04, 0xa8, 0x45, 0xf9, 0x03, 0x12, 0x22, 0x0a,
	0x17, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x53, 0x4f, 0x5f, 0x4e, 0x45,
	0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x53, 0x10, 0xa8, 0x14, 0x1a, 0x04, 0xa8, 0x45, 0xfa,
	0x03, 0x12, 0x1f, 0x0a, 0x14, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x8c, 0x15, 0x1a, 0x04, 0xa8, 0x45,
	0xfb, 0x03, 0x12, 0x18, 0x0a, 0x0d, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0xf0, 0x15, 0x1a, 0x04, 0xa8, 0x45, 0xfc, 0x03, 0x12, 0x17, 0x0a, 0x0c,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xd4, 0x16, 0x1a,
	0x04, 0xa8, 0x45, 0xfe, 0x03, 0x12, 0x2a, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xb8, 0x17, 0x1a, 0x04, 0xa8, 0x45, 0xff,
	0x03, 0x12, 0x25, 0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x9c, 0x18, 0x1a, 0x04, 0xa8, 0x45, 0xd6, 0x04, 0x12, 0x28, 0x0a, 0x1d, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x80, 0x19, 0x1a, 0x04, 0xa8, 0x45,
	0xd7, 0x04, 0x1a, 0x04, 0xa0, 0x45, 0xf4, 0x03, 0x42, 0xbd, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x42, 0x0e, 0x42, 0x61, 0x6e, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x38, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2d, 0x64, 0x74, 0x6d, 0x2d, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42,
	0x53, 0x58, 0xaa, 0x02, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x42, 0x61, 0x6e, 0x6b, 0x5c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x42, 0x61, 0x6e, 0x6b, 0x3a, 0x3a, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_bank_service_v1_bank_error_proto_rawDescOnce sync.Once
	file_bank_service_v1_bank_error_proto_rawDescData []byte
)

func file_bank_service_v1_bank_error_proto_rawDescGZIP() []byte {
	file_bank_service_v1_bank_error_proto_rawDescOnce.Do(func() {
		file_bank_service_v1_bank_error_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bank_service_v1_bank_error_proto_rawDesc), len(file_bank_service_v1_bank_error_proto_rawDesc)))
	})
	return file_bank_service_v1_bank_error_proto_rawDescData
}

var file_bank_service_v1_bank_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bank_service_v1_bank_error_proto_goTypes = []any{
	(BankErrorReason)(0), // 0: bank.service.v1.BankErrorReason
}
var file_bank_service_v1_bank_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_bank_service_v1_bank_error_proto_init() }
func file_bank_service_v1_bank_error_proto_init() {
	if File_bank_service_v1_bank_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bank_service_v1_bank_error_proto_rawDesc), len(file_bank_service_v1_bank_error_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bank_service_v1_bank_error_proto_goTypes,
		DependencyIndexes: file_bank_service_v1_bank_error_proto_depIdxs,
		EnumInfos:         file_bank_service_v1_bank_error_proto_enumTypes,
	}.Build()
	File_bank_service_v1_bank_error_proto = out.File
	file_bank_service_v1_bank_error_proto_goTypes = nil
	file_bank_service_v1_bank_error_proto_depIdxs = nil
}
