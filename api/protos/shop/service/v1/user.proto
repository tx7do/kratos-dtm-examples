syntax = "proto3";

package shop.service.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "pagination/v1/pagination.proto";

// 用户服务
service UserService {
  rpc GetUser(GetUserRequest) returns (User) {
    option (gnostic.openapi.v3.operation) = {
      summary: "获取用户信息",
      description: "通过用户ID获取用户信息"
    };
  }
}

message GetUserRequest {
  uint32 user_id = 1 [
    (gnostic.openapi.v3.property) = {description: "用户ID"},
    json_name = "userId"
  ]; // 用户ID
}

message User {
  uint32 id = 1 [
    (gnostic.openapi.v3.property) = {description: "用户ID"},
    json_name = "id"
  ]; // 用户ID

  string username = 2 [
    (gnostic.openapi.v3.property) = {description: "用户名"},
    json_name = "username"
  ]; // 用户名

  string email = 3 [
    (gnostic.openapi.v3.property) = {description: "用户邮箱"},
    json_name = "email"
  ]; // 用户邮箱

  string nickname = 4 [
    (gnostic.openapi.v3.property) = {description: "用户昵称"},
    json_name = "nickname"
  ]; // 用户昵称

  optional google.protobuf.Timestamp create_time = 200 [json_name = "createTime", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp update_time = 201 [json_name = "updateTime", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp delete_time = 202 [json_name = "deleteTime", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}
