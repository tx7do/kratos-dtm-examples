// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
	"github.com/tx7do/kratos-bootstrap/api/gen/go/conf/v1"
	"kratos-dtm-examples/app/shop/service/internal/data"
	"kratos-dtm-examples/app/shop/service/internal/server"
	"kratos-dtm-examples/app/shop/service/internal/service"
)

import (
	_ "github.com/dtm-labs/driver-kratos"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(logger log.Logger, registrar registry.Registrar, bootstrap *v1.Bootstrap) (*kratos.App, func(), error) {
	discovery := data.NewDiscovery(bootstrap)
	dataData, cleanup, err := data.NewData(logger, discovery)
	if err != nil {
		return nil, nil, err
	}
	bankServiceClient := data.NewBankServiceClient(discovery, bootstrap)
	shopService := service.NewShopService(logger, dataData, bankServiceClient)
	productService := service.NewProductService(logger)
	grpcServer := server.NewGRPCServer(bootstrap, logger, shopService, productService)
	httpServer := server.NewRestServer(bootstrap, shopService)
	app := newApp(logger, registrar, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
